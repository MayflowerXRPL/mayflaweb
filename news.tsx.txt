// pages/news.tsx
import { GetStaticProps, NextPage } from 'next';
import Layout from '../components/Layout';    // 既存のレイアウト部品
import BlogCard from '../components/BlogCard';  // 既存のブログカード部品

// soso VALUEから来るニュース記事1つ分のデータの形
interface SosoArticle {
  id: string; // 記事のID (BlogCardのkeyに使うと良い)
  title: string;
  summary: string;
  cover_image?: string;
  published_at: number; // 公開された時間 (数字)
  url: string; // 元記事のインターネット上の住所 (URL)
}

// BlogCard部品に渡すために整形したニュース記事1つ分のデータの形
interface NewsCardData {
  id: string; // 記事のID
  title: string;
  date: string; // 表示用の日付 (例: "2023/05/17")
  excerpt: string; // 記事の短いまとめ
  slug: string; // 元記事のURL (BlogCardのslugプロパティに渡す)
  imageUrl?: string;
}

// news.tsxページ全体が必要とするデータ (ニュース一覧とエラー情報)
interface NewsPageProps {
  newsItems: NewsCardData[];
  error: string | null; // エラーが起きた場合、その内容
}

// ウェブサイトが作られるとき (ビルド時) に実行される部分
export const getStaticProps: GetStaticProps<NewsPageProps> = async () => {
  console.log("soso VALUEからニュースを取りに行きます...");
  let newsItems: NewsCardData[] = [];
  let error: string | null = null;

  // ステップ1で設定したAPIキーを読み込む
  const apiKey = process.env.SOSOVALUE_API_KEY;

  if (!apiKey) {
    error = "APIキーが設定されていません！ .env.localファイルを確認してください。";
    console.error(error);
    return { props: { newsItems, error } }; // エラー情報をページに渡す
  }

  const sosoApiUrl = `https://api.sosovalue.xyz/api/v1/article/list?lang=ja&page_num=1&page_size=12`; // 日本語のニュースを12件取得

  try {
    const response = await fetch(sosoApiUrl, {
      method: 'GET',
      headers: {
        'api-key': apiKey, // ここでAPIキーを使う
      },
    });

    console.log(`soso VALUEからの応答: Status ${response.status}`);

    if (!response.ok) { // うまくいかなかった場合
      const errorBody = await response.text();
      error = `ニュースの取得に失敗しました。Status: ${response.status}, 詳細: ${errorBody}`;
      console.error(error);
    } else { // うまくいった場合
      const result: { code: number; msg: string; data?: { list: SosoArticle[] } } = await response.json();
      
      if (result.code === 0 && result.data && Array.isArray(result.data.list)) {
        // 取得したニュースデータを、BlogCard部品で使える形に1つずつ変換
        newsItems = result.data.list.map((article: SosoArticle) => ({
          id: article.id, // soso VALUEのIDをそのまま使う
          title: article.title,
          date: new Date(article.published_at * 1000).toLocaleDateString('ja-JP', {
            year: 'numeric', month: '2-digit', day: '2-digit',
          }),
          excerpt: article.summary,
          slug: article.url, // 元記事のURL
          imageUrl: article.cover_image,
        }));
        console.log(`${newsItems.length}件のニュースを整形しました。`);
      } else {
        error = `APIからのデータ形式が正しくないようです。Code: ${result.code}, Msg: ${result.msg || 'No message'}`;
        console.error(error);
      }
    }
  } catch (e: any) {
    error = `ニュース取得中に予期せぬエラーが発生しました: ${e.message}`;
    console.error(error, e);
  }

  return {
    props: { // 整形したニュース一覧とエラー情報をページに渡す
      newsItems,
      error,
    },
    revalidate: 3600, // 1時間ごとにニュースを更新し直す
  };
};

// 実際に画面に表示する部分
const NewsPage: NextPage<NewsPageProps> = ({ newsItems, error }) => {
  if (error) { // もしエラーがあれば、エラーメッセージを表示
    return (
      <Layout pageTitle="ニュースエラー" description="ニュース表示エラー">
        <div style={{ padding: '20px', textAlign: 'center', color: 'red' }}>
          <h1>ニュースの表示に失敗しました</h1>
          <p>{error}</p>
        </div>
      </Layout>
    );
  }

  if (!newsItems || newsItems.length === 0) { // ニュースが1件もなければ
    return (
      <Layout pageTitle="メイフラニュース" description="最新ニュース">
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <h1>メイフラニュース</h1>
          <p>現在、表示できるニュースはありません。</p>
        </div>
      </Layout>
    );
  }

  // エラーがなく、ニュースがあれば、一覧表示
  return (
    <Layout pageTitle="メイフラニュース" description="soso VALUE提供の最新ニュース">
      <div className="container mx-auto px-4 py-8"> {/* このあたりのクラス名はお客様のプロジェクトに合わせてください */}
        <h1 className="text-4xl font-bold text-mayfblue-500 mb-8 text-center"> {/* スタイルはお客様のプロジェクトに合わせて */}
          メイフラニュース
        </h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"> {/* スタイルはお客様のプロジェクトに合わせて */}
          {newsItems.map((item) => (
            <BlogCard
              key={item.id} // 各カードを区別するためのID (soso VALUEのIDを使う)
              title={item.title}
              date={item.date}
              excerpt={item.excerpt}
              slug={item.slug} // 元記事URL
              imageUrl={item.imageUrl}
            />
          ))}
        </div>
      </div>
    </Layout>
  );
};

export default NewsPage;